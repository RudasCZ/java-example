plugins {
	id "java"
	id "org.openapi.generator" version "$openApiGeneratorVersion"
	id "org.springframework.boot" version "$springBootVersion"
	id "io.spring.dependency-management" version "$springDependencyManagementVersion"
}

group = "com.homework"
version = "0.0.1-SNAPSHOT"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-validation"
	implementation "org.liquibase:liquibase-core:$liquibaseVersion"
	implementation "org.mapstruct:mapstruct:$mapStructVersion"
	implementation "org.openapitools:jackson-databind-nullable:$jacksonDatabindNullableVersion"
	implementation "jakarta.validation:jakarta.validation-api:$jakartaValidationApiVersion"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$openApiStarterUIVersion"
	implementation "io.swagger.parser.v3:swagger-parser:$swaggerParserVersion"

	compileOnly "org.projectlombok:lombok"
	runtimeOnly "org.postgresql:postgresql:$postgresqlVersion"
	annotationProcessor "org.projectlombok:lombok"
	annotationProcessor "org.mapstruct:mapstruct-processor:$mapStructVersion"

	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.springframework.security:spring-security-test"
	testImplementation "com.h2database:h2:$h2DBVersion"
	testImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"
	testImplementation "org.testcontainers:postgresql:$testContainersVersion"
	testImplementation "org.assertj:assertj-core:$assertjVersion"

	testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
	}
}

ext {
	apiGenPath = "${layout.buildDirectory.get()}/generated/openapi"
}

openApiGenerate {
	generatorName = "spring"
	inputSpec = "$projectDir/src/main/resources/apispec/app-openapi3.yaml".toString()
	outputDir = "$apiGenPath"

	generateAliasAsModel = true
	modelNameSuffix = "Dto"

	configOptions = [
			library                : "spring-cloud",
			documentationProvider  : "none",
			useSpringBoot3         : "true",
			interfaceOnly          : "true",
			dateLibrary            : "java8",
			hideGenerationTimestamp: "true",
			serializableModel      : "true",
			singleContentTypes     : "true",
			useBeanValidation      : "true",
			performBeanValidation  : "true",
			useTags                : "true",
			apiPackage             : "com.homework.morosystems.rest.api",
			modelPackage           : "com.homework.morosystems.model",
			invokerPackage         : "com.homework.morosystems.invoker",
	]
}

compileJava {
	dependsOn("openApiGenerate")
	options.compilerArgs = [
			"-Amapstruct.defaultComponentModel=spring"
	]
}

sourceSets {
	main {
		java.srcDirs += "$apiGenPath/src/main/java"
	}
}

tasks.named("test") {
	useJUnitPlatform()
}
